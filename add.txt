1.admin get product by category
2.cloudinary to image uploads
3.verification through (Email, integration) 
4.frontend -routes,navbar




1.user Panel with react is completed-vite,tailwind
2.all APIs are completed-tested via postman



https://github.com/GreatStackDev/notes/blob/main/Vercel_JSON_Config_For_MERN.md


00:00 Project Overview
10:51 React Project Setup
20:48 Create Pages and Routing
31:21 Create Home Page components
01:50:15 Create Collection Page
02:46:21 Create Product page
03:41:41 Cart and Place Order Page
04:34:09 My Order and Login Page
04:55:57 About and Contact Page
05:10:15 Create Backend
05:50:20 Create User Authentication feature
06:22:20 Create Product upload feature
07:08:44 Create authentication for Admin
07:24:23 Create Admin dashboard
08:01:55 Connect Backend APIs with Admin panel
09:24:00 Connect Backend APIs with eCommerce Website
10:32:55 Create Place Order feature
11:37:02 Display order details in Admin panel
12:10:59 Add Stripe payment gateway
12:45:52 Add Razorpay payment gateway
13:21:15 Deploy Full Stack project on Vercel






const onSubmitHandler = async (event) => {
  event.preventDefault();
  try {
    let orderItems = [];
    let updateStockPromises = [];

    for (const items in cartItems) {
      for (const item in cartItems[items]) {
        if (cartItems[items][item] > 0) {
          const itemInfo = structuredClone(products.find((product) => product._id === items));
          if (itemInfo) {
            itemInfo.size = item;
            itemInfo.quantity = cartItems[items][item];
            orderItems.push(itemInfo);

            // Prepare stock update data
            const updatedStock = {
              productId: itemInfo._id, // Ensure correct key (_id or productId)
              stock: {
                ...itemInfo.stock,
                [item]: Math.max(0, itemInfo.stock[item] - cartItems[items][item]),
              },
            };

            console.log("Updating stock with data:", updatedStock);

            // Push API call promise to update stock
            updateStockPromises.push(
              axios.patch(`${backendUrl}/api/v1/product/updateProduct`, updatedStock, {
                headers: { token, "Content-Type": "application/json" }
              })
            );
          }
        }
      }
    }

    let orderData = {
      address: formData,
      items: orderItems,
      amount: getCartAmount() + deliveryFee,
    };

    switch (method) {
      case "cod":
        const response = await axios.post(`${backendUrl}/api/v1/order/place`, orderData, {
          headers: { token, "Content-Type": "application/json" }
        });

        if (response.data.success) {
          // Execute all stock update requests
          await Promise.all(updateStockPromises);
          
          setcartItems({});
          navigate("/orders");
          toast.success(response.data.message);
        } else {
          toast.error(response.data.message);
        }
        break;
      
      default:
        break;
    }
  } catch (error) {
    console.error("Error placing order:", error.response?.data || error.message);
    toast.error(error.response?.data?.message || error.message);
  }
};